"""Llama Dataset Class."""

from abc import abstractmethod
from dataclasses import dataclass
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from dataclasses_json import DataClassJsonMixin

from llama_index.bridge.pydantic import BaseModel
from llama_index.schema import TextNode


class LlamaRagDataExampleKind(str, Enum):
    """The kinds of rag data examples."""

    HUMAN = "human"
    AI = "ai"


@dataclass(repr=True)
class BaseLlamaDataExample(DataClassJsonMixin):
    """Base llama dataset example class."""

    @property
    @abstractmethod
    def class_name(self) -> str:
        """Class name."""
        return "BaseLlamaDataExample"


@dataclass(repr=True)
class LlamaRagDataExample(BaseLlamaDataExample):
    """RAG example class.

    Args:
        query (str): The user query
        response (str): The response to the query
        contexts (List[str] or List[TextNode]): The contexts used for response
        kind (LlamaRagDataExampleKind): The example is generated by human or ai
        reference (Optional[str]): Optional. Reference answer to the query.
    """

    query: str
    response: str
    contexts: Union[List[TextNode], List[str]]
    kind: LlamaRagDataExampleKind
    reference: Optional[str] = None

    @property
    def class_name(self) -> str:
        """Data example class name."""
        return "LlamaRagDataExample"


class BaseLlamaDataset(BaseModel):
    @abstractmethod
    def to_pandas(self) -> Dict[str, Any]:
        """Get modules."""

    @abstractmethod
    def run(self, *args: Any, **kwargs: Any) -> Any:
        """Run."""
