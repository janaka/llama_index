"""Llama Dataset Class."""

import warnings
from dataclasses import dataclass
from enum import Enum
from typing import List, Optional, Union

from llama_index.llama_dataset.base import BaseLlamaDataExample, BaseLlamaDataset
from llama_index.schema import TextNode


class LlamaRagDataExampleKind(str, Enum):
    """The kinds of rag data examples."""

    HUMAN = "human"
    AI = "ai"


@dataclass(repr=True)
class LlamaRagDataExample(BaseLlamaDataExample):
    """RAG example class.

    Args:
        query (str): The user query
        response (str): The response to the query
        contexts (List[str] or List[TextNode]): The contexts used for response
        kind (LlamaRagDataExampleKind): The example is generated by human or ai
        reference (Optional[str]): Optional. Reference answer to the query.
    """

    query: str
    response: str
    contexts: Union[List[TextNode], List[str]]
    kind: LlamaRagDataExampleKind
    reference: Optional[str] = None

    @property
    def class_name(self) -> str:
        """Data example class name."""
        return "LlamaRagDataExample"

    def to_json(self) -> str:
        if isinstance(self.contexts[0], str):
            return super().to_json()
        else:
            warnings.warn(
                "TextNode is not serializable. Stripping out text field only.",
                stacklevel=2,
            )
            return LlamaRagDataExample(
                query=self.query,
                response=self.response,
                kind=self.kind,
                reference=self.reference,
                contexts=[t.text for t in self.contexts],
            ).to_json()


class RagDataset(BaseLlamaDataset):
    """RagDataset class.

    Args:
        BaseLlamaDataset (_type_): _description_
    """
