"""Llama Dataset Class."""

import warnings
from dataclasses import dataclass
from enum import Enum
from typing import List, Union

from pandas import DataFrame as PandasDataFrame

from llama_index.llama_dataset.base import BaseLlamaDataExample, BaseLlamaDataset
from llama_index.schema import TextNode


class RagDataExampleKind(str, Enum):
    """The kinds of rag data examples."""

    HUMAN = "human"
    AI = "ai"


@dataclass(repr=True)
class LabelledRagDataExample(BaseLlamaDataExample):
    """RAG example class. Analogous to traditional ML datasets, this dataset contains
    the "features" (i.e., query + context) to make a prediction and the "label" (i.e., response)
    to evaluate the prediction.

    Args:
        query (str): The user query
        contexts (List[str] or List[TextNode]): The contexts used for response
        kind (LlamaRagDataExampleKind): The example is generated by human or ai
        reference ([str]): Reference answer to the query. An answer
                                    that would receive full marks upon evaluation.
    """

    query: str
    contexts: Union[List[TextNode], List[str]]
    kind: RagDataExampleKind
    reference: str = None

    @property
    def class_name(self) -> str:
        """Data example class name."""
        return "LlamaRagDataExample"

    def to_json(self) -> str:
        if isinstance(self.contexts[0], str):
            return super().to_json()
        else:
            warnings.warn(
                "TextNode is not serializable. Stripping out text field only.",
                stacklevel=2,
            )
            return LabelledRagDataExample(
                query=self.query,
                kind=self.kind,
                reference=self.reference,
                contexts=[t.text for t in self.contexts],
            ).to_json()


class RagDataset(BaseLlamaDataset):
    """RagDataset class."""

    def to_pandas(self) -> PandasDataFrame:
        """Create pandas dataframe."""
        data = {
            "query": [t.query for t in self.train_examples]
            + [t.query for t in self.test_examples],
            "context": [t.contexts for t in self.train_examples]
            + [t.contexts for t in self.test_examples],
            "reference": [t.reference for t in self.train_examples]
            + [t.reference for t in self.test_examples],
            "kind": [t.kind for t in self.train_examples]
            + [t.kind for t in self.test_examples],
            "split": ["train"] * len(self.train_examples)
            + ["test"] * len(self.test_examples),
        }
        return PandasDataFrame(data)
