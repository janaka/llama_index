"""Llama Dataset Class."""

from dataclasses import dataclass
from typing import List

from pandas import DataFrame as PandasDataFrame

from llama_index.llama_dataset.base import (
    BaseLlamaDataExample,
    BaseLlamaDataset,
    CreatedByType,
)


@dataclass(repr=True)
class LabelledRagDataExample(BaseLlamaDataExample):
    """RAG example class. Analogous to traditional ML datasets, this dataset contains
    the "features" (i.e., query + context) to make a prediction and the "label" (i.e., response)
    to evaluate the prediction.

    Args:
        query (str): The user query
        kind (LlamaRagDataExampleKind): The example is generated by human or ai
        reference_contexts (List[str] or List[TextNode]): The contexts used for response
        reference_answer ([str]): Reference answer to the query. An answer
                                    that would receive full marks upon evaluation.
    """

    query: str
    query_by: CreatedByType
    reference_contexts: List[str]
    reference_answer: str
    reference_answer_by: CreatedByType

    @property
    def class_name(self) -> str:
        """Data example class name."""
        return "LlamaRagDataExample"


class LabelledRagDataset(BaseLlamaDataset):
    """RagDataset class."""

    def to_pandas(self) -> PandasDataFrame:
        """Create pandas dataframe."""
        data = {
            "query": [t.query for t in self.train_examples]
            + [t.query for t in self.test_examples],
            "reference_contexts": [t.reference_contexts for t in self.train_examples]
            + [t.reference_contexts for t in self.test_examples],
            "reference_answer": [t.reference_answer for t in self.train_examples]
            + [t.reference_answer for t in self.test_examples],
            "reference_answer_by": [
                str(t.reference_answer_by) for t in self.train_examples
            ]
            + [str(t.reference_answer_by) for t in self.test_examples],
            "query_by": [str(t.query_by) for t in self.train_examples]
            + [str(t.query_by) for t in self.test_examples],
            "split": ["train"] * len(self.train_examples)
            + ["test"] * len(self.test_examples),
        }
        return PandasDataFrame(data)
